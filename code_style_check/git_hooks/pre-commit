#!/bin/bash
base_dir=$(git rev-parse --show-toplevel)
cpplint=${base_dir}/utils/cpplint/cpplint.py

if [[ ! -x "$cpplint" ]]; then
  echo "$cpplint is not executable or found!"
  exit 1
fi

# Find the submodules that have been modified (if any), and check
# if submodule(s) is modified together with other added/modified files within this commit
submodules=$(grep path ${base_dir}/.gitmodules | sed 's/^.*path = //')
mod_submodules=$(git diff --cached --name-only | grep -wF "$submodules")

if [[ -n "${mod_submodules}" ]]; then
  for sub_mod in ${mod_submodules}; do
    echo "*** modified submodule: ${sub_mod} ***"
    for file in $(git diff --name-only --cached); do
      if [[ "$file" != "${sub_mod}" ]]; then
        echo -e "\033[31mERROR: submodule ${sub_mod} is modified with other files in the same commit!\033[0m"
        exit 1
      fi
    done
  done
fi

# Find only added/modified .h / .hpp / .cpp / .cc files for cpplint
# echo "cpplint starts..."
lint_errs=0
for file in $(git diff --name-only --cached | grep -E '^.+\.(h|hpp|cpp|cc)$'); do
  if [ -f "$file" ]; then
    $cpplint $file
    if [ $? -eq 0 ]; then
      echo -e "$file cpplint \033[32mok\033[0m"
    else
      lint_errs=$(expr ${lint_errs} + $?)
    fi
  fi
done

if [ ${lint_errs} -eq 0 ]; then
  # echo -e "\033[32mAll files pass cpplint\033[0m"
  exit 0
else
  echo -e "\033[31mTotal ${lint_errs} files fail cpplint\033[0m"
  exit 1
fi
